<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L的博客</title>
  <link rel="alternate" type="text/html" href="http://wangxuan12.github.io"/>
  <link rel="self" type="application/atom+xml" href="/atom.xml"/>
  
  <updated>2020-08-12T01:13:23.965Z</updated>
  <id>http://wangxuan12.github.io/</id>
  <icon>https://gitee.com/shuijing12/MyPic/raw/master/image/avatar/blog_avatar.jpeg</icon>
  <subtitle>探索·好奇</subtitle>
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>OkHttp源码分析</title>
    <link href="http://wangxuan12.github.io/2020/07/03/okhttp-yuan-ma-fen-xi/"/>
    <id>http://wangxuan12.github.io/2020/07/03/okhttp-yuan-ma-fen-xi/</id>
    
    
    <author>
    <name>L</name>
    <uri>http://wangxuan12.github.io/about</uri>
    </author>
    
    
    <published>2020-07-03T11:50:18.000Z</published>
    <updated>2020-08-12T01:13:23.965Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>OkHttp的核心：</p><ol><li><code>OkHttpClient</code>：配置中心</li><li><code>Dispather</code>：进行线程的调度</li><li><code>RealCall</code>：进行实际的请求执行</li><li><code>RealInterceptorChain</code>：使用责任链模式，逐级调用拦截器，最终返回<code>Response</code></li></ol></blockquote><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p>直接盗用了OkHttp官方的:chestnut:</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> client = OkHttpClient()</span><br><span class="line"><span class="keyword">val</span> request = Request.Builder()</span><br><span class="line">.url(url)</span><br><span class="line">      .build()</span><br><span class="line">client.newCall(request).execute()</span><br></pre></td></tr></table></figure><h2 id="OKHttp-请求的大致流程"><a href="#OKHttp-请求的大致流程" class="headerlink" title="OKHttp 请求的大致流程"></a>OKHttp 请求的大致流程</h2><p>先上图：</p><img src="https://gitee.com/shuijing12/MyPic/raw/master/image/android/okhttp_01.jpg" style="zoom:70%;" /><p>使用<code>OkHttp</code>进行请求的时候可以使用<code>execute</code> 或者 <code>enqueue</code>，这两者之间的区别就是<code>execute</code>会直接就进行请求，而<code>enqueue</code>会经过<code>Dispather</code>进行调度后在请求。</p><p>那首先先看看简单一点的，也就是下面这个:chestnut:</p><p><code>client.newCall(request).execute()</code></p><p><code>newCall</code>需要一个Request的参数，而其返回值是一个<code>Call</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">newCall</span><span class="params">(request: <span class="type">Request</span>)</span></span>: Call = RealCall(<span class="keyword">this</span>, request, forWebSocket = <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>可以看到里面创建的是一个<code>RealCall</code>对象，然后返回。</p><p>然后得到<code>RealCall</code>后，就会调用它的<code>execute</code>方法来获得响应结果：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">execute</span><span class="params">()</span></span>: Response &#123;</span><br><span class="line">  synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">    check(!executed) &#123; <span class="string">"Already Executed"</span> &#125;</span><br><span class="line">    executed = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  timeout.enter()</span><br><span class="line">  callStart()</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//将RealCall添加进执行队列</span></span><br><span class="line">    client.dispatcher.executed(<span class="keyword">this</span>)</span><br><span class="line">    <span class="comment">//经过拦截器逐级执行，最后返回Response结果</span></span><br><span class="line">    <span class="keyword">return</span> getResponseWithInterceptorChain()</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    client.dispatcher.finished(<span class="keyword">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>dispatcher</code>的<code>execute</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Synchronized</span> <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">executed</span><span class="params">(call: <span class="type">RealCall</span>)</span></span> &#123;</span><br><span class="line">  <span class="comment">//添加进执行队列</span></span><br><span class="line">  runningSyncCalls.add(call)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个OkHttp进行请求的大致流程了。</p><p><strong>总结一下就是：当使用<code>client.newCall(request)</code> 时我们创建了一个<code>ReallCall</code>对象，紧接着调用了<code>RealCall</code>的<code>execute()</code>方法，把<code>RealCall</code>添加进执行队列中，最后通过<code>getResponseWithInterceptorChain()</code>方法（其内部添加了一个个拦截器，然后采用责任链模式，逐级执行）最终得到了<code>Response</code>返回结果。</strong></p><h2 id="Dispatcher-调度器"><a href="#Dispatcher-调度器" class="headerlink" title="Dispatcher 调度器"></a>Dispatcher 调度器</h2><p>首先来看看Dispatcher的一些属性：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//所能允许的最大请求数</span></span><br><span class="line"><span class="meta">@get:Synchronized</span> <span class="keyword">var</span> maxRequests = <span class="number">64</span></span><br><span class="line"><span class="comment">//对于每个host所能允许的最大请求数</span></span><br><span class="line"><span class="meta">@get:Synchronized</span> <span class="keyword">var</span> maxRequestsPerHost = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@get:Synchronized</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"executorService"</span>) <span class="keyword">val</span> executorService: ExecutorService</span><br><span class="line"><span class="keyword">get</span>() &#123;</span><br><span class="line">    <span class="keyword">if</span> (executorServiceOrNull == <span class="literal">null</span>) &#123;</span><br><span class="line">        executorServiceOrNull = ThreadPoolExecutor(<span class="number">0</span>, <span class="built_in">Int</span>.MAX_VALUE, <span class="number">60</span>, TimeUnit.SECONDS,</span><br><span class="line">                SynchronousQueue(), threadFactory(<span class="string">"<span class="variable">$okHttpName</span> Dispatcher"</span>, <span class="literal">false</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> executorServiceOrNull!!</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//待处理的异步请求队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> readyAsyncCalls = ArrayDeque&lt;AsyncCall&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//正在执行的异步请求队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> runningAsyncCalls = ArrayDeque&lt;AsyncCall&gt;()</span><br><span class="line"></span><br><span class="line"><span class="comment">//正在执行的同步请求队列</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> runningSyncCalls = ArrayDeque&lt;RealCall&gt;()</span><br></pre></td></tr></table></figure><p>之前只说了使用<code>execute</code>的情况，接下来就来说说<code>enqueue</code>的。</p><p>使用<code>enqueue</code>的时候会进行线程切换到后台，进行请求，使用方式：</p><p><code>client.newCall(request).enqueue(callBack)</code></p><p><code>enqueue</code>会将传进去的<code>CallBack</code>参数包装成一个<code>AsyncCall</code>：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">enqueue</span><span class="params">(responseCallback: <span class="type">Callback</span>)</span></span> &#123;</span><br><span class="line">  synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">    check(!executed) &#123; <span class="string">"Already Executed"</span> &#125;</span><br><span class="line">    executed = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">  callStart()</span><br><span class="line">  client.dispatcher.enqueue(AsyncCall(responseCallback))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而且可以看到这里使用的是<code>dispatcher</code>的<code>enqueue</code>方法，不过我们先不管它。先看看<code>AsyncCall</code>是个啥玩意，看名字是一个异步的<code>Call</code>。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="keyword">inner</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncCall</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> responseCallback: Callback</span><br><span class="line">  ) : Runnable</span><br></pre></td></tr></table></figure><p>果不其然，它实现了<code>Runnable</code>接口，那自然而然的也就会有<code>run</code>方法了。</p><p>那就来看看<code>run</code>方法都干了些啥</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">()</span></span> &#123;</span><br><span class="line">    threadName(<span class="string">"OkHttp <span class="subst">$&#123;redactedUrl()&#125;</span>"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> signalledCallback = <span class="literal">false</span></span><br><span class="line">      timeout.enter()</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//经过拦截器逐级执行，最后返回Response结果</span></span><br><span class="line">        <span class="keyword">val</span> response = getResponseWithInterceptorChain()</span><br><span class="line">        signalledCallback = <span class="literal">true</span></span><br><span class="line">        <span class="comment">//请求成功的回调结果</span></span><br><span class="line">        responseCallback.onResponse(<span class="keyword">this</span><span class="symbol">@RealCall</span>, response)</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">        <span class="keyword">if</span> (signalledCallback) &#123;</span><br><span class="line">          <span class="comment">// Do not signal the callback twice!</span></span><br><span class="line">          Platform.<span class="keyword">get</span>().log(<span class="string">"Callback failure for <span class="subst">$&#123;toLoggableString()&#125;</span>"</span>, Platform.INFO, e)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">//请求失败的回调结果</span></span><br><span class="line">          responseCallback.onFailure(<span class="keyword">this</span><span class="symbol">@RealCall</span>, e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (t: Throwable) &#123;</span><br><span class="line">        cancel()</span><br><span class="line">        <span class="keyword">if</span> (!signalledCallback) &#123;</span><br><span class="line">          <span class="keyword">val</span> canceledException = IOException(<span class="string">"canceled due to <span class="variable">$t</span>"</span>)</span><br><span class="line">          canceledException.addSuppressed(t)</span><br><span class="line">          responseCallback.onFailure(<span class="keyword">this</span><span class="symbol">@RealCall</span>, canceledException)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> t</span><br><span class="line">      &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        client.dispatcher.finished(<span class="keyword">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法有点长，不过我们只关心最主要的，其中<code>getResponseWithInterceptorChain()</code>，和<code>execute()</code>中的一样返回<code>response</code>。接下来<code>responseCallback.onResponse</code>和<code>responseCallback.onFailure</code>这两个方法实在太熟悉了，这不就是我们天天写的<code>CallBack</code>回调！</p><p>这下<code>enqueue</code>的流程也结束了。不过发觉没有，<code>enqueue</code>比<code>execute</code>还少了一步。那就是并没有看到将其加入到<strong>执行队列中</strong>，为什么<code>execute</code>需要加入到执行队列而<code>enqueue</code>不需要呢？难道有什么py交易？当然不是，还记得上面提到的<code>dispatcher</code>么，没错其实加入队列操作<code>dispatcher</code>做了，那到底是不是这样呢？那就让我们那看看把。毕竟真相只有一个。</p><p>回到之前的<code>client.dispatcher.enqueue(AsyncCall(responseCallback))</code>方法，让我们看看<code>dispatcher.enqueue</code>有什么秘密。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">enqueue</span><span class="params">(call: <span class="type">AsyncCall</span>)</span></span> &#123;</span><br><span class="line">  synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="comment">//将call加入待处理队列</span></span><br><span class="line">    readyAsyncCalls.add(call)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mutate the AsyncCall so that it shares the AtomicInteger of an existing running call to</span></span><br><span class="line">    <span class="comment">// the same host.</span></span><br><span class="line">    <span class="keyword">if</span> (!call.call.forWebSocket) &#123;</span><br><span class="line">      <span class="keyword">val</span> existingCall = findExistingCallWithHost(call.host)</span><br><span class="line">      <span class="keyword">if</span> (existingCall != <span class="literal">null</span>) call.reuseCallsPerHostFrom(existingCall)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//去执行call</span></span><br><span class="line">  promoteAndExecute()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到它主要做了两部分工作，先将其加入待处理队列，然后去执行。至于为什么要先加入到待处理队列，我们之后再说。那接下来就来看看<code>promoteAndExecute</code>做了什么。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">promoteAndExecute</span><span class="params">()</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">  <span class="keyword">this</span>.assertThreadDoesntHoldLock()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> executableCalls = mutableListOf&lt;AsyncCall&gt;()</span><br><span class="line">  <span class="keyword">val</span> isRunning: <span class="built_in">Boolean</span></span><br><span class="line">  synchronized(<span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> i = readyAsyncCalls.iterator()</span><br><span class="line">    <span class="keyword">while</span> (i.hasNext()) &#123;</span><br><span class="line">      <span class="keyword">val</span> asyncCall = i.next()</span><br><span class="line"><span class="comment">//正在执行请求数量大于了所允许的最大请求数，那么就不将其从待处理队列移到执行队列。</span></span><br><span class="line">      <span class="keyword">if</span> (runningAsyncCalls.size &gt;= <span class="keyword">this</span>.maxRequests) <span class="keyword">break</span> <span class="comment">// Max capacity.</span></span><br><span class="line">      <span class="comment">//同样，这里是每个host的最大请求不能大于所允许的最大值。</span></span><br><span class="line">      <span class="keyword">if</span> (asyncCall.callsPerHost.<span class="keyword">get</span>() &gt;= <span class="keyword">this</span>.maxRequestsPerHost) <span class="keyword">continue</span> <span class="comment">// Host max capacity.</span></span><br><span class="line"></span><br><span class="line">      i.remove()</span><br><span class="line">      asyncCall.callsPerHost.incrementAndGet()</span><br><span class="line">      executableCalls.add(asyncCall)</span><br><span class="line">      <span class="comment">//将call加入到执行队列</span></span><br><span class="line">      runningAsyncCalls.add(asyncCall)</span><br><span class="line">    &#125;</span><br><span class="line">    isRunning = runningCallsCount() &gt; <span class="number">0</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看到最后也是加入到了执行队列中，这就将<code>execute</code>和<code>enqueue</code>对应起来了。</p><p>下面来通过一个时序图，再来对比一下<code>execute</code>和<code>enqueue</code>两种实现方法的不同：</p><img src="https://gitee.com/shuijing12/MyPic/raw/master/image/android/okhttp_02.png" style="zoom:70%; background-color: #f4f5f5;" /><h2 id="OkHttpClient-配置中心"><a href="#OkHttpClient-配置中心" class="headerlink" title="OkHttpClient 配置中心"></a>OkHttpClient 配置中心</h2><p>对于OkHttpClient我们主要关注一下它的配置属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调度器，调度后台线程发起请求。</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"dispatcher"</span>) <span class="keyword">val</span> dispatcher: Dispatcher = builder.dispatcher</span><br><span class="line"><span class="comment">//连接池，对链接进行管理和复用，和线程池差不多。</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"connectionPool"</span>) <span class="keyword">val</span> connectionPool: ConnectionPool = builder.connectionPool</span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截器</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"interceptors"</span>) <span class="keyword">val</span> interceptors: List&lt;Interceptor&gt; =</span><br><span class="line">    builder.interceptors.toImmutableList()</span><br><span class="line"></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"networkInterceptors"</span>) <span class="keyword">val</span> networkInterceptors: List&lt;Interceptor&gt; =</span><br><span class="line">    builder.networkInterceptors.toImmutableList()</span><br><span class="line"><span class="comment">//对连接的发起，连接的返回等一系列事件监听。</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"eventListenerFactory"</span>) <span class="keyword">val</span> eventListenerFactory: EventListener.Factory =</span><br><span class="line">    builder.eventListenerFactory</span><br><span class="line"><span class="comment">//对连接失败和请求失败的重试开关。</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"retryOnConnectionFailure"</span>) <span class="keyword">val</span> retryOnConnectionFailure: <span class="built_in">Boolean</span> =</span><br><span class="line">    builder.retryOnConnectionFailure</span><br><span class="line"><span class="comment">//用于自动重新认证，比如用来做token的刷新。</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"authenticator"</span>) <span class="keyword">val</span> authenticator: Authenticator = builder.authenticator</span><br><span class="line"><span class="comment">//当需要重定向时，是否自动follow</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"followRedirects"</span>) <span class="keyword">val</span> followRedirects: <span class="built_in">Boolean</span> = builder.followRedirects</span><br><span class="line"><span class="comment">//当需要重定向，并且还会切换协议的时候（比如https切换成http），是否自动follow</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"followSslRedirects"</span>) <span class="keyword">val</span> followSslRedirects: <span class="built_in">Boolean</span> = builder.followSslRedirects</span><br><span class="line"><span class="comment">//饼干罐，用于存储cookie，OkHttp默认没有实现。</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"cookieJar"</span>) <span class="keyword">val</span> cookieJar: CookieJar = builder.cookieJar</span><br><span class="line"><span class="comment">//缓存</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"cache"</span>) <span class="keyword">val</span> cache: Cache? = builder.cache</span><br><span class="line"><span class="comment">//域名服务</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"dns"</span>) <span class="keyword">val</span> dns: Dns = builder.dns</span><br><span class="line"><span class="comment">//使用代理服务器</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"proxy"</span>) <span class="keyword">val</span> proxy: Proxy? = builder.proxy</span><br><span class="line"></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"proxySelector"</span>) <span class="keyword">val</span> proxySelector: ProxySelector =</span><br><span class="line">    <span class="keyword">when</span> &#123;</span><br><span class="line">      <span class="comment">// Defer calls to ProxySelector.getDefault() because it can throw a SecurityException.</span></span><br><span class="line">      builder.proxy != <span class="literal">null</span> -&gt; NullProxySelector</span><br><span class="line">      <span class="keyword">else</span> -&gt; builder.proxySelector ?: ProxySelector.getDefault() ?: NullProxySelector</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"proxyAuthenticator"</span>) <span class="keyword">val</span> proxyAuthenticator: Authenticator =</span><br><span class="line">    builder.proxyAuthenticator</span><br><span class="line"><span class="comment">//使用socket进行http连接</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"socketFactory"</span>) <span class="keyword">val</span> socketFactory: SocketFactory = builder.socketFactory</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> sslSocketFactoryOrNull: SSLSocketFactory?</span><br><span class="line"><span class="comment">//使用加密过的socket进行http连接</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"sslSocketFactory"</span>) <span class="keyword">val</span> sslSocketFactory: SSLSocketFactory</span><br><span class="line">  <span class="keyword">get</span>() = sslSocketFactoryOrNull ?: <span class="keyword">throw</span> IllegalStateException(<span class="string">"CLEARTEXT-only client"</span>)</span><br><span class="line"><span class="comment">//证书验证器</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"x509TrustManager"</span>) <span class="keyword">val</span> x509TrustManager: X509TrustManager?</span><br><span class="line"><span class="comment">//存放有tls版本和所支持的加密套件（包括非对称加密，对称加密和hash算法）</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"connectionSpecs"</span>) <span class="keyword">val</span> connectionSpecs: List&lt;ConnectionSpec&gt; =</span><br><span class="line">    builder.connectionSpecs</span><br><span class="line"><span class="comment">//支持的协议版本，Http/1.1 Http/2.0等</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"protocols"</span>) <span class="keyword">val</span> protocols: List&lt;Protocol&gt; = builder.protocols</span><br><span class="line"><span class="comment">//证书验证相关，对域名进行验证</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"hostnameVerifier"</span>) <span class="keyword">val</span> hostnameVerifier: HostnameVerifier = builder.hostnameVerifier</span><br><span class="line"><span class="comment">//证书验证相关，可以自验证证书</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"certificatePinner"</span>) <span class="keyword">val</span> certificatePinner: CertificatePinner</span><br><span class="line"><span class="comment">//证书验证相关，证书验证的实际操作者</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"certificateChainCleaner"</span>) <span class="keyword">val</span> certificateChainCleaner: CertificateChainCleaner?</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Default call timeout (in milliseconds). By default there is no timeout for complete calls, but</span></span><br><span class="line"><span class="comment"> * there is for the connect, write, and read actions within a call.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"callTimeoutMillis"</span>) <span class="keyword">val</span> callTimeoutMillis: <span class="built_in">Int</span> = builder.callTimeout</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Default connect timeout (in milliseconds). The default is 10 seconds. */</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"connectTimeoutMillis"</span>) <span class="keyword">val</span> connectTimeoutMillis: <span class="built_in">Int</span> = builder.connectTimeout</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Default read timeout (in milliseconds). The default is 10 seconds. */</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"readTimeoutMillis"</span>) <span class="keyword">val</span> readTimeoutMillis: <span class="built_in">Int</span> = builder.readTimeout</span><br><span class="line"></span><br><span class="line"><span class="comment">/** Default write timeout (in milliseconds). The default is 10 seconds. */</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"writeTimeoutMillis"</span>) <span class="keyword">val</span> writeTimeoutMillis: <span class="built_in">Int</span> = builder.writeTimeout</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送心跳连接，来保持连接存活，用于webSocekt和Http2</span></span><br><span class="line"><span class="meta">@get:JvmName</span>(<span class="string">"pingIntervalMillis"</span>) <span class="keyword">val</span> pingIntervalMillis: <span class="built_in">Int</span> = builder.pingInterval</span><br></pre></td></tr></table></figure><h2 id="RealCall-请求执行者"><a href="#RealCall-请求执行者" class="headerlink" title="RealCall 请求执行者"></a>RealCall 请求执行者</h2><p>之前<code>execute</code>和<code>enqueue</code>最终都会执行<code>getResponseWithInterceptorChain</code>方法，而这两个都是RealCall的方法。其中<code>enqueue</code>最终会执行到<code>AsyncCall</code>的<code>run</code>方法，而<code>AsyncCall</code>其实是RealCall的子类，也就是说<code>getResponseWithInterceptorChain</code>其实是<code>RealCall</code>中的方法。</p><p>那我们来看看<code>getResponseWithInterceptorChain</code>到底做了什么把。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">getResponseWithInterceptorChain</span><span class="params">()</span></span>: Response &#123;</span><br><span class="line">  <span class="comment">//添加各种拦截器</span></span><br><span class="line">  <span class="keyword">val</span> interceptors = mutableListOf&lt;Interceptor&gt;()</span><br><span class="line">  <span class="comment">//这是供使用者使用的拦截器</span></span><br><span class="line">  interceptors += client.interceptors</span><br><span class="line">  <span class="comment">//重试和重定向拦截器</span></span><br><span class="line">  interceptors += RetryAndFollowUpInterceptor(client)</span><br><span class="line">  <span class="comment">//发送时，对reques的header和body进行拼接，得到响应后，对Response进行解析。</span></span><br><span class="line">  interceptors += BridgeInterceptor(client.cookieJar)</span><br><span class="line">  <span class="comment">//缓存拦截器，会根据一些策略判断缓存是否过期，没有过期则直接返回。</span></span><br><span class="line">  interceptors += CacheInterceptor(client.cache)</span><br><span class="line">  <span class="comment">//和tcp和ssl连接相关</span></span><br><span class="line">  interceptors += ConnectInterceptor</span><br><span class="line">  <span class="keyword">if</span> (!forWebSocket) &#123;</span><br><span class="line">    interceptors += client.networkInterceptors</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//最终的http请求发起者。</span></span><br><span class="line">  interceptors += CallServerInterceptor(forWebSocket)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里构造了一个责任链</span></span><br><span class="line">  <span class="keyword">val</span> chain = RealInterceptorChain(</span><br><span class="line">      call = <span class="keyword">this</span>,</span><br><span class="line">      interceptors = interceptors,</span><br><span class="line">      index = <span class="number">0</span>,</span><br><span class="line">      exchange = <span class="literal">null</span>,</span><br><span class="line">      request = originalRequest,</span><br><span class="line">      connectTimeoutMillis = client.connectTimeoutMillis,</span><br><span class="line">      readTimeoutMillis = client.readTimeoutMillis,</span><br><span class="line">      writeTimeoutMillis = client.writeTimeoutMillis</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//从第一个拦截器开始逐级执行。</span></span><br><span class="line">    <span class="keyword">val</span> response = chain.proceed(originalRequest)</span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到<code>getResponseWithInterceptorChain</code>的工作就是，把各种拦截器都组合成一个list，然后使用责任链模式，将list放入到<code>RealInterceptorChain</code>中，并开始逐级执行。</p><h2 id="RealInterceptorChain"><a href="#RealInterceptorChain" class="headerlink" title="RealInterceptorChain"></a>RealInterceptorChain</h2><p><code>RealInterceptorChain</code>是拦截器能够逐级执行的实际管理者。</p><p>来看看它的核心代码：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">proceed</span><span class="params">(request: <span class="type">Request</span>)</span></span>: Response &#123;</span><br><span class="line">  <span class="comment">//index是每个拦截器的下标，这里就是进行一个边界判断</span></span><br><span class="line">  check(index &lt; interceptors.size)</span><br><span class="line">...</span><br><span class="line">  <span class="comment">//这里来获取下一个拦截器</span></span><br><span class="line">  <span class="keyword">val</span> next = copy(index = index + <span class="number">1</span>, request = request)</span><br><span class="line">  <span class="keyword">val</span> interceptor = interceptors[index]</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Suppress(<span class="meta-string">"USELESS_ELVIS"</span>)</span></span><br><span class="line">  <span class="comment">//调用这个拦截器的intercept方法</span></span><br><span class="line">  <span class="keyword">val</span> response = interceptor.intercept(next) ?: <span class="keyword">throw</span> NullPointerException(</span><br><span class="line">      <span class="string">"interceptor <span class="variable">$interceptor</span> returned null"</span>)</span><br><span class="line">...</span><br><span class="line">  <span class="comment">//最后返回response</span></span><br><span class="line">  <span class="keyword">return</span> response</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是责任链调度的核心方法，其实现<strong>类似递归</strong>。</p><p>其实到这里就差不多了，接下来就简单看看几个拦截器实际执行的intercept方法，其实不看都行。</p><p>每个拦截器的intercept执行方法，其关键是找到<code>realChain.proceed</code>方法，在这个方法之前的都是进行前置处理，也就是发送前的处理。在此方法后的都是后置处理，也就是得到响应后的处理。</p><p>接着来看看OkHttp责任链的执行流程：</p><img src="https://gitee.com/shuijing12/MyPic/raw/master/image/android/okhttp_03.png" style="zoom:70%; background-color: #f4f5f5;" /><h3 id="RetryAndFollowUpInterceptor"><a href="#RetryAndFollowUpInterceptor" class="headerlink" title="RetryAndFollowUpInterceptor"></a>RetryAndFollowUpInterceptor</h3><p>负责在请求失败时的重试，以及重定向的 ⾃动后续请求。它的存在，可以让重试和重定向对于开发者是⽆感知的</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">intercept</span><span class="params">(chain: <span class="type">Interceptor</span>.<span class="type">Chain</span>)</span></span>: Response &#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment">//可以看到是一个死循环</span></span><br><span class="line">   <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">     ...<span class="comment">//进行前置处理</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//交给下一个拦截器处理</span></span><br><span class="line">         response = realChain.proceed(request)</span><br><span class="line">         newExchangeFinder = <span class="literal">true</span></span><br><span class="line">         <span class="comment">//这里两个catch都是失败后，需要重试或者重定向的处理</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (e: RouteException) &#123;</span><br><span class="line">         <span class="comment">// The attempt to connect via a route failed. The request will not have been sent.</span></span><br><span class="line">         <span class="keyword">if</span> (!recover(e.lastConnectException, call, request, requestSendStarted = <span class="literal">false</span>)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> e.firstConnectException.withSuppressed(recoveredFailures)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           recoveredFailures += e.firstConnectException</span><br><span class="line">         &#125;</span><br><span class="line">         newExchangeFinder = <span class="literal">false</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">       &#125; <span class="keyword">catch</span> (e: IOException) &#123;</span><br><span class="line">         <span class="comment">// An attempt to communicate with a server failed. The request may have been sent.</span></span><br><span class="line">         <span class="keyword">if</span> (!recover(e, call, request, requestSendStarted = e !<span class="keyword">is</span> ConnectionShutdownException)) &#123;</span><br><span class="line">           <span class="keyword">throw</span> e.withSuppressed(recoveredFailures)</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           recoveredFailures += e</span><br><span class="line">         &#125;</span><br><span class="line">         newExchangeFinder = <span class="literal">false</span></span><br><span class="line">         <span class="keyword">continue</span></span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">      ...</span><br><span class="line">       <span class="comment">//满足条件后就跳出循环，返回Response</span></span><br><span class="line">       <span class="keyword">if</span> (followUp == <span class="literal">null</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (exchange != <span class="literal">null</span> &amp;&amp; exchange.isDuplex) &#123;</span><br><span class="line">           call.timeoutEarlyExit()</span><br><span class="line">         &#125;</span><br><span class="line">         closeActiveExchange = <span class="literal">false</span></span><br><span class="line">         <span class="keyword">return</span> response</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">val</span> followUpBody = followUp.body</span><br><span class="line">       <span class="keyword">if</span> (followUpBody != <span class="literal">null</span> &amp;&amp; followUpBody.isOneShot()) &#123;</span><br><span class="line">         closeActiveExchange = <span class="literal">false</span></span><br><span class="line">         <span class="keyword">return</span> response</span><br><span class="line">       &#125;</span><br><span class="line">       request = followUp</span><br><span class="line">       priorResponse = response</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       call.exitNetworkInterceptorExchange(closeActiveExchange)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="BridgeInterceptor"><a href="#BridgeInterceptor" class="headerlink" title="BridgeInterceptor"></a>BridgeInterceptor</h3><p>主要是发送时，对reques的header和body进行拼接，得到响应后，对Response进行解析。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">intercept</span><span class="params">(chain: <span class="type">Interceptor</span>.<span class="type">Chain</span>)</span></span>: Response &#123;</span><br><span class="line">  <span class="keyword">val</span> userRequest = chain.request()</span><br><span class="line">  <span class="keyword">val</span> requestBuilder = userRequest.newBuilder()</span><br><span class="line">...</span><br><span class="line">   <span class="comment">//下面都是类似的请求拼接流程</span></span><br><span class="line">  <span class="keyword">if</span> (userRequest.header(<span class="string">"Host"</span>) == <span class="literal">null</span>) &#123;</span><br><span class="line">    requestBuilder.header(<span class="string">"Host"</span>, userRequest.url.toHostHeader())</span><br><span class="line">  &#125;</span><br><span class="line">...</span><br><span class="line">  <span class="comment">//把处理交给下一个拦截器</span></span><br><span class="line">  <span class="keyword">val</span> networkResponse = chain.proceed(requestBuilder.build())</span><br><span class="line"></span><br><span class="line">   <span class="comment">//下面就是得到响应后做一些解析工作</span></span><br><span class="line">  cookieJar.receiveHeaders(userRequest.url, networkResponse.headers)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> responseBuilder = networkResponse.newBuilder()</span><br><span class="line">      .request(userRequest)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (transparentGzip &amp;&amp;</span><br><span class="line">      <span class="string">"gzip"</span>.equals(networkResponse.header(<span class="string">"Content-Encoding"</span>), ignoreCase = <span class="literal">true</span>) &amp;&amp;</span><br><span class="line">      networkResponse.promisesBody()) &#123;</span><br><span class="line">    <span class="keyword">val</span> responseBody = networkResponse.body</span><br><span class="line">    <span class="keyword">if</span> (responseBody != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">val</span> gzipSource = GzipSource(responseBody.source())</span><br><span class="line">      <span class="keyword">val</span> strippedHeaders = networkResponse.headers.newBuilder()</span><br><span class="line">          .removeAll(<span class="string">"Content-Encoding"</span>)</span><br><span class="line">          .removeAll(<span class="string">"Content-Length"</span>)</span><br><span class="line">          .build()</span><br><span class="line">      responseBuilder.headers(strippedHeaders)</span><br><span class="line">      <span class="keyword">val</span> contentType = networkResponse.header(<span class="string">"Content-Type"</span>)</span><br><span class="line">      responseBuilder.body(RealResponseBody(contentType, -<span class="number">1L</span>, gzipSource.buffer()))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> responseBuilder.build()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CacheInterceptor"><a href="#CacheInterceptor" class="headerlink" title="CacheInterceptor"></a>CacheInterceptor</h3><p>缓存拦截器，会根据一些策略判断缓存是否过期，没有过期则直接返回。</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">intercept</span><span class="params">(chain: <span class="type">Interceptor</span>.<span class="type">Chain</span>)</span></span>: Response &#123;</span><br><span class="line"></span><br><span class="line">     ...</span><br><span class="line">    <span class="comment">//这里就是缓存处理判断的地方</span></span><br><span class="line">   <span class="keyword">val</span> strategy = CacheStrategy.Factory(now, chain.request(), cacheCandidate).compute()</span><br><span class="line">   </span><br><span class="line">     ...</span><br><span class="line">       </span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//交给下一个拦截器处理</span></span><br><span class="line">     networkResponse = chain.proceed(networkRequest)</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">     <span class="comment">// If we're crashing on I/O or otherwise, don't leak the cache body.</span></span><br><span class="line">     <span class="keyword">if</span> (networkResponse == <span class="literal">null</span> &amp;&amp; cacheCandidate != <span class="literal">null</span>) &#123;</span><br><span class="line">       cacheCandidate.body?.closeQuietly()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 判断是否需要更新缓存</span></span><br><span class="line">   <span class="keyword">if</span> (cacheResponse != <span class="literal">null</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (networkResponse?.code == HTTP_NOT_MODIFIED) &#123;</span><br><span class="line">       <span class="keyword">val</span> response = cacheResponse.newBuilder()</span><br><span class="line">           .headers(combine(cacheResponse.headers, networkResponse.headers))</span><br><span class="line">           .sentRequestAtMillis(networkResponse.sentRequestAtMillis)</span><br><span class="line">           .receivedResponseAtMillis(networkResponse.receivedResponseAtMillis)</span><br><span class="line">           .cacheResponse(stripBody(cacheResponse))</span><br><span class="line">           .networkResponse(stripBody(networkResponse))</span><br><span class="line">           .build()</span><br><span class="line"></span><br><span class="line">       networkResponse.body!!.close()</span><br><span class="line"></span><br><span class="line">       <span class="comment">// Update the cache after combining headers but before stripping the</span></span><br><span class="line">       <span class="comment">// Content-Encoding header (as performed by initContentStream()).</span></span><br><span class="line">       cache!!.trackConditionalCacheHit()</span><br><span class="line">       cache.update(cacheResponse, response)</span><br><span class="line">       <span class="keyword">return</span> response.also &#123;</span><br><span class="line">         listener.cacheHit(call, it)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       cacheResponse.body?.closeQuietly()</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">...</span><br><span class="line">   <span class="keyword">return</span> response</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="ConnectInterceptor"><a href="#ConnectInterceptor" class="headerlink" title="ConnectInterceptor"></a>ConnectInterceptor</h3><p>tcp和ssl连接相关</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">intercept</span><span class="params">(chain: <span class="type">Interceptor</span>.<span class="type">Chain</span>)</span></span>: Response &#123;</span><br><span class="line">  <span class="keyword">val</span> realChain = chain <span class="keyword">as</span> RealInterceptorChain</span><br><span class="line">  <span class="keyword">val</span> exchange = realChain.call.initExchange(chain)</span><br><span class="line">  <span class="keyword">val</span> connectedChain = realChain.copy(exchange = exchange)</span><br><span class="line">  <span class="keyword">return</span> connectedChain.proceed(realChain.request)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CallServerInterceptor"><a href="#CallServerInterceptor" class="headerlink" title="CallServerInterceptor"></a>CallServerInterceptor</h3><p>代码就不贴了，最后这个拦截器的工作就是发送Http包和接受响应了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>到这里就正在的结束了，最后再简单的总结一下：</p><p><strong>当使用<code>client.newCall(request)</code> 时我们创建了一个<code>ReallCall</code>对象，紧接着调用了<code>RealCall</code>的<code>execute()</code>方法，把<code>RealCall</code>添加进执行队列中，最后通过<code>getResponseWithInterceptorChain()</code>方法（其内部使用通过拦截器组成的责任链，通过 用户自定的拦截器、重试(重定向)、桥接、缓存、建立tcp和tls连接 和 建立Http连接）最终得到了<code>Response</code>返回结果。而<code>enqueue</code>只是多了个通过使用dispatcher将其调度到后台线程进行执行而已。</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://github.com/square/okhttp" target="_blank" rel="noopener">OkHttp:4.7.2源码</a></li><li><a href="https://www.jianshu.com/p/27c1554b7fee" target="_blank" rel="noopener">OKHttp源码解析</a></li><li><a href="https://juejin.im/post/5bc89fbc5188255c713cb8a5#heading-10" target="_blank" rel="noopener">Andriod 网络框架 OkHttp 源码解析</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          
        
      
    
    </summary>
    
    
      <category term="Android" scheme="http://wangxuan12.github.io/categories/Android/"/>
    
    
      <category term="源码分析" scheme="http://wangxuan12.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="http" scheme="http://wangxuan12.github.io/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://wangxuan12.github.io/2020/05/03/zheng-ze-biao-da-shi/"/>
    <id>http://wangxuan12.github.io/2020/05/03/zheng-ze-biao-da-shi/</id>
    
    
    <author>
    <name>L</name>
    <uri>http://wangxuan12.github.io/about</uri>
    </author>
    
    
    <published>2020-05-03T07:53:02.000Z</published>
    <updated>2020-08-12T01:13:23.965Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>正则表达式元字符分类</p><ol><li>基础</li><li>空白符</li><li>量词</li><li>范围</li><li>边界</li><li>贪婪&amp;非贪婪</li><li>环视</li><li>子组</li></ol></blockquote><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p><code>.</code> 任意字符（换行除外）<br><code>\d</code> 任意数字 <code>\D</code> 任意非数字<br><code>\w</code> 任意数字字母下划线 <code>\W</code> 数字、字母和下划线以外的任意字符<br><code>\s</code> 任意空白符 <code>\S</code> 任意非空白符</p><h2 id="空白符"><a href="#空白符" class="headerlink" title="空白符"></a>空白符</h2><p><code>\r</code> 回车符<br><code>\n</code> 换行符<br><code>\f</code> 换页符<br><code>\t</code> 制表符<br><code>\v</code> 垂直制表符</p><h2 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h2><p><code>*</code> 含义： 0 到多次<br><code>+</code> 含义： 1 到多次<br><code>?</code> 含义： 0 到 1 次<br><code>{m}</code> 含义：出现 m 次<br><code>{m,n}</code> 含义： m 到 n 次<br><code>{,n}</code> 其中  m 不写代表 0 ，至多 n 次<br><code>{m,}</code> 其中  n 不写代表无穷大，至少 m 次</p><h2 id="范围"><a href="#范围" class="headerlink" title="范围"></a>范围</h2><p><code>|</code> 或，如 ab|bc 代表 ab 或 bc<br><code>[...]</code> 多选一，括号中任意单个元素<br><code>[a-z]</code> 匹配 a 到 z 之间任意单个元素（按 ASCII 表，包含 a , z ）<br><code>[^...]</code> 取反，不能是括号中的任意单个元素</p><h3 id="举例验证手机号"><a href="#举例验证手机号" class="headerlink" title="举例验证手机号"></a>举例验证手机号</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>[<span class="number">3456789</span>]\d&#123;<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>[<span class="number">3</span><span class="number">-9</span>]\d&#123;<span class="number">9</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>[^<span class="number">012</span>]\d&#123;<span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="边界"><a href="#边界" class="headerlink" title="边界"></a>边界</h2><p><code>^</code> 匹配行的开始，多行模式时，可以匹配任意行开头<br><code>$</code> 匹配行的结束，多行模式时，可以匹配任意行结尾<br><code>\b</code> 匹配单词边界<br><code>\A</code> 仅匹配整个字符串的开始，不支持多行模式<br><code>\Z</code> 仅匹配整个字符的结束，不支持多行模式</p><h3 id="b的事例"><a href="#b的事例" class="headerlink" title="\b的事例"></a>\b的事例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REGULAR EXPRESSION:</span><br><span class="line">\bthe\b</span><br><span class="line"></span><br><span class="line">TEST STRING:</span><br><span class="line">`the` cat is in `the` hat</span><br><span class="line">there is a cat</span><br></pre></td></tr></table></figure><h3 id="A的事例"><a href="#A的事例" class="headerlink" title="\A的事例"></a>\A的事例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REGULAR EXPRESSION:</span><br><span class="line">\Athe</span><br><span class="line"></span><br><span class="line">TEST STRING:</span><br><span class="line">`the` cat is in the hat</span><br><span class="line">the cat is in the hat</span><br></pre></td></tr></table></figure><h3 id="的事例"><a href="#的事例" class="headerlink" title="^的事例"></a>^的事例</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">REGULAR EXPRESSION:</span><br><span class="line">^the</span><br><span class="line"></span><br><span class="line">TEST STRING:</span><br><span class="line">`the` cat is in the hat</span><br><span class="line">`the` cat is in the hat</span><br></pre></td></tr></table></figure><h2 id="贪婪-amp-非贪婪"><a href="#贪婪-amp-非贪婪" class="headerlink" title="贪婪&amp;非贪婪"></a>贪婪&amp;非贪婪</h2><p>贪婪：表示次数的量词，默认是贪婪的，默认尽可能多地去匹配<br>非贪婪：<code>量词</code> 元字符后加 <code>?</code> 找出长度最小且满足要求的</p><h3 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REGULAR EXPRESSION:</span><br><span class="line"><span class="string">".+"</span></span><br><span class="line"></span><br><span class="line">TEST STRING:</span><br><span class="line">`<span class="string">"the little cat"</span> is a toy, it looks <span class="string">"a little bas"</span>.`</span><br></pre></td></tr></table></figure><h3 id="非贪婪匹配"><a href="#非贪婪匹配" class="headerlink" title="非贪婪匹配"></a>非贪婪匹配</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">REGULAR EXPRESSION:</span><br><span class="line"><span class="string">".+?"</span></span><br><span class="line"></span><br><span class="line">TEST STRING:</span><br><span class="line">`<span class="string">"the little cat"</span>` is a toy, it looks `<span class="string">"a little bas"</span>`.</span><br></pre></td></tr></table></figure><h2 id="环视"><a href="#环视" class="headerlink" title="环视"></a>环视</h2><p><code>X(?&lt;=Y)</code> 匹配前面是 Y 的 X<br><code>X(?&lt;!Y)</code> 匹配前面不是 Y 的 X<br><code>X(?=X)</code> 匹配后面是 Y 的 X<br><code>X(?!Y)</code> 匹配后面不是 Y 的 X </p><h2 id="子组"><a href="#子组" class="headerlink" title="子组"></a>子组</h2><p><code>(regex)</code> 将 regex 保存成一个子组<br><code>(?p&lt;name&gt;regex)</code> 命名子组，将 regex 保存成名称为 name 的子组<br><code>(?:regex)</code> 仅分组，不保存这个子组<br><code>\</code> 分组编号 重复每个子组</p><p><a href="https://regex101.com" target="_blank" rel="noopener">正则验证</a></p>]]></content>
    
    <summary type="html">
    
      一些基本的正则操作
    
    </summary>
    
    
      <category term="工具" scheme="http://wangxuan12.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="基础" scheme="http://wangxuan12.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="正则" scheme="http://wangxuan12.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
      <category term="Regex" scheme="http://wangxuan12.github.io/tags/Regex/"/>
    
  </entry>
  
</feed>
